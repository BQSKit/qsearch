#![feature(prelude_import)]
#![no_std]
#[prelude_import]
use ::std::prelude::v1::*;
#[macro_use]
extern crate std as std;
use ndarray::{Array2, arr2};
use numpy::array::{PyArray2, PyArray1};
use num_complex::Complex64;

use pyo3::prelude::*;
use pyo3::{AsPyPointer, PyTypeInfo, wrap_pyfunction};
use pyo3::types::PyAny;

pub mod utils {


































































    /*
    pub fn hello() {
        let mut z = rot_z(PI);
        println!("rotx(PI):\n{}", rot_x(PI));
        println!("roty(PI):\n{}", rot_y(PI));
        println!("rotz(PI):\n{}", z);
        re_rot_z(&mut z, PI / 2.0);
        println!("rerotz(PI/2):\n{}", z);
        let vs = [PI, PI, PI];
        
        let id = GateIdentity::new(2, 1);
        println!("Identity::matrix():\n{}", id.matrix(&vs));
        
        let rz = GateRZ::new(1);
        println!("RZ::matrix():\n{}", rz.matrix(&vs));
        
        let rx = GateRX::new(1);
        println!("RX::matrix():\n{}", rx.matrix(&vs));

        let ry = GateRY::new(1);
        println!("RY::matrix():\n{}", ry.matrix(&vs));

        let one = GateSingleQubit::new(1);
        println!("SingleQubit::matrix():\n{}", one.matrix(&vs));

        let cnot = GateCNOT::new();
        println!("CNOT::matrix():\n{}", cnot.matrix(&vs));
        let rzz = GateRZ::new(1);
        let idd = GateIdentity::new(2, 1);

        let steps: Vec<&dyn QuantumGate> = vec![&rzz, &idd];
        let kronecker = GateKronecker::new(steps.clone());
        println!("Kronecker of id and rz:\n{}", kronecker.matrix(&vs));
        let prod = GateProduct::new(steps.clone());
        println!("Product of id and rz:\n{}", prod.matrix(&vs));
    }
    */


    use ndarray::arr2;
    use num_complex::Complex64;
    use crate::ComplexUnitary;
    pub fn rot_x(theta: f64) -> ComplexUnitary {
        let half_theta = Complex64::new(theta / 2.0, 0.0);
        let negi = Complex64::new(0.0, -1.0);
        arr2(&[[half_theta.cos(), negi * half_theta.sin()],
               [negi * half_theta.sin(), half_theta.cos()]])
    }
    pub fn rot_y(theta: f64) -> ComplexUnitary {
        let half_theta = Complex64::new(theta / 2.0, 0.0);
        arr2(&[[half_theta.cos(), -half_theta.sin()],
               [half_theta.sin(), half_theta.cos()]])
    }
    pub fn rot_z(theta: f64) -> ComplexUnitary {
        let half_theta = Complex64::new(theta / 2.0, 0.0);
        let negi = Complex64::new(0.0, -1.0);
        let posi = Complex64::new(0.0, 1.0);
        let zero = Complex64::new(0.0, 0.0);
        arr2(&[[(negi * half_theta).exp(), zero],
               [zero, (posi * half_theta).exp()]])
    }
    pub fn re_rot_z(u: &mut ComplexUnitary, theta: f64) {
        let half_theta = Complex64::new(theta / 2.0, 0.0);
        let negi = Complex64::new(0.0, -1.0);
        let posi = Complex64::new(0.0, 1.0);
        u[[0, 0]] = (negi * half_theta).exp();
        u[[1, 1]] = (posi * half_theta).exp();
    }
    pub fn kron(a: &ComplexUnitary, b: &ComplexUnitary) -> ComplexUnitary {
        let dima = a.shape()[0];
        let dimb = b.shape()[0];
        let dimout = dima * dimb;
        let mut out = ComplexUnitary::zeros((dimout, dimout));
        for (mut chunk, elem) in
            out.exact_chunks_mut((dimb, dimb)).into_iter().zip(a.iter()) {
            chunk.assign(&(*elem * b));
        }
        out
    }
}
pub mod circuits {
    use pyo3::prelude::*;
    use pyo3::ffi;
    use pyo3::types::PyAny;
    use ndarray::arr2;
    use num_complex::Complex64;
    use numpy::array::{PyArray1, PyArray2};
    use crate::utils::{rot_x, rot_y, rot_z, kron};
    use crate::{ComplexUnitary, PyComplexUnitary};
    use std::mem;
}
pub mod gatesets { }
use utils::{rot_x, rot_y, rot_z, re_rot_z, kron};
pub type ComplexUnitary = Array2<Complex64>;
pub type PyComplexUnitary = PyArray2<Complex64>;
pub trait QuantumGate {
    fn make_matrix(&self, v: &[f64])
    -> ComplexUnitary;
    fn assembly(&self, v: &[f64]);
    fn input_num(&self)
    -> usize;
}
impl QuantumGate for PyObject {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary {
        let gil = Python::acquire_gil();
        let py = gil.python();
        unsafe {
            PyComplexUnitary::from_owned_ptr(py,
                                             self.call_method1(py, "matrix",
                                                               (PyArray1::from_slice(py,
                                                                                     v),)).expect("Invalid array").as_ptr()).to_owned_array()
        }
    }
    fn assembly(&self, v: &[f64]) { }
    fn input_num(&self) -> usize { 0 }
}
struct QuantumGateData {
    pub d: u8,
    pub dits: u8,
    pub num_inputs: usize,
}
pub struct GateIdentity {
    data: QuantumGateData,
    mat: ComplexUnitary,
}
impl pyo3::type_object::PyTypeInfo for GateIdentity {
    type
    Type
    =
    GateIdentity;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateIdentity";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateIdentity>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateIdentity>() - 1) /
             ::std::mem::align_of::<GateIdentity>() *
             ::std::mem::align_of::<GateIdentity>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateIdentity {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateIdentityGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for
 GateIdentityGeneratedPyo3Inventory {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateIdentity {
    type
    InventoryType
    =
    GateIdentityGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateIdentityGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY:
               ::inventory::Registry<GateIdentityGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateIdentity { }
impl GateIdentity {
    fn new(obj: &PyRawObject, n: usize, dits: u8) {
        obj.init({
                     GateIdentity{mat: ComplexUnitary::eye(n),
                                  data:
                                      QuantumGateData{d:
                                                          n.pow((1 / dits) as
                                                                    u32) as
                                                              u8,
                                                      dits: dits,
                                                      num_inputs: 0,},}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init10414802882451866231: extern "C" fn() =
    {
        extern "C" fn __init10414802882451866231() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateIdentity as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateIdentity.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateIdentity::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "n",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,},
                                                                                                                                                         pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "dits",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None,
                                                                                                                                                        None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                let arg1 =
                                                                                                                                                                    output[1usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateIdentity::new(&_obj,
                                                                                                                                                                                                                                   arg0,
                                                                                                                                                                                                                                   arg1))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateIdentity.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateIdentity =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateIdentity.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateIdentity =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateIdentity.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateIdentity =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init10414802882451866231
    };
impl QuantumGate for GateIdentity {
    fn make_matrix(&self, _v: &[f64]) -> ComplexUnitary { self.mat.clone() }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateRZ {
    data: QuantumGateData,
}
impl pyo3::type_object::PyTypeInfo for GateRZ {
    type
    Type
    =
    GateRZ;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateRZ";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateRZ>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateRZ>() - 1) /
             ::std::mem::align_of::<GateRZ>() *
             ::std::mem::align_of::<GateRZ>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateRZ {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateRZGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for GateRZGeneratedPyo3Inventory
 {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateRZ {
    type
    InventoryType
    =
    GateRZGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateRZGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY: ::inventory::Registry<GateRZGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateRZ { }
impl GateRZ {
    fn new(obj: &PyRawObject, d: u8) {
        obj.init({
                     GateRZ{data:
                                QuantumGateData{d: d,
                                                dits: 1,
                                                num_inputs: 1,},}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init4850016176011599361: extern "C" fn() =
    {
        extern "C" fn __init4850016176011599361() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateRZ as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateRZ.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateRZ::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "d",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateRZ::new(&_obj,
                                                                                                                                                                                                                             arg0))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRZ.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRZ =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRZ.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRZ =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRZ.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRZ =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init4850016176011599361
    };
impl QuantumGate for GateRZ {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary { rot_z(v[0]) }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateRX {
    data: QuantumGateData,
}
impl pyo3::type_object::PyTypeInfo for GateRX {
    type
    Type
    =
    GateRX;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateRX";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateRX>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateRX>() - 1) /
             ::std::mem::align_of::<GateRX>() *
             ::std::mem::align_of::<GateRX>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateRX {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateRXGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for GateRXGeneratedPyo3Inventory
 {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateRX {
    type
    InventoryType
    =
    GateRXGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateRXGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY: ::inventory::Registry<GateRXGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateRX { }
impl GateRX {
    fn new(obj: &PyRawObject, d: u8) {
        obj.init({
                     GateRX{data:
                                QuantumGateData{d: d,
                                                dits: 1,
                                                num_inputs: 1,},}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init6561494339170269591: extern "C" fn() =
    {
        extern "C" fn __init6561494339170269591() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateRX as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateRX.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateRX::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "d",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateRX::new(&_obj,
                                                                                                                                                                                                                             arg0))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRX.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRX =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRX.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRX =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRX.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRX =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init6561494339170269591
    };
impl QuantumGate for GateRX {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary { rot_x(v[0]) }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateRY {
    data: QuantumGateData,
}
impl pyo3::type_object::PyTypeInfo for GateRY {
    type
    Type
    =
    GateRY;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateRY";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateRY>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateRY>() - 1) /
             ::std::mem::align_of::<GateRY>() *
             ::std::mem::align_of::<GateRY>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateRY {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateRYGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for GateRYGeneratedPyo3Inventory
 {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateRY {
    type
    InventoryType
    =
    GateRYGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateRYGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY: ::inventory::Registry<GateRYGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateRY { }
impl GateRY {
    fn new(obj: &PyRawObject, d: u8) {
        obj.init({
                     GateRY{data:
                                QuantumGateData{d: d,
                                                dits: 1,
                                                num_inputs: 1,},}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init10773690734882296183: extern "C" fn() =
    {
        extern "C" fn __init10773690734882296183() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateRY as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateRY.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateRY::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "d",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateRY::new(&_obj,
                                                                                                                                                                                                                             arg0))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRY.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRY =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRY.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRY =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateRY.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateRY =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init10773690734882296183
    };
impl QuantumGate for GateRY {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary { rot_y(v[0]) }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateSingleQubit {
    data: QuantumGateData,
}
impl pyo3::type_object::PyTypeInfo for GateSingleQubit {
    type
    Type
    =
    GateSingleQubit;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateSingleQubit";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    {
        Self::OFFSET as usize + ::std::mem::size_of::<GateSingleQubit>() + 0 +
            0
    };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateSingleQubit>() - 1) /
             ::std::mem::align_of::<GateSingleQubit>() *
             ::std::mem::align_of::<GateSingleQubit>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateSingleQubit {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateSingleQubitGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for
 GateSingleQubitGeneratedPyo3Inventory {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateSingleQubit {
    type
    InventoryType
    =
    GateSingleQubitGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateSingleQubitGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY:
               ::inventory::Registry<GateSingleQubitGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateSingleQubit { }
impl GateSingleQubit {
    fn new(obj: &PyRawObject, d: u8) {
        obj.init({
                     GateSingleQubit{data:
                                         QuantumGateData{d: d,
                                                         dits: 1,
                                                         num_inputs: 3,},}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init4955309810367351016: extern "C" fn() =
    {
        extern "C" fn __init4955309810367351016() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateSingleQubit as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateSingleQubit.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateSingleQubit::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "d",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateSingleQubit::new(&_obj,
                                                                                                                                                                                                                                      arg0))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateSingleQubit.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateSingleQubit =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateSingleQubit.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateSingleQubit =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateSingleQubit.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateSingleQubit =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init4955309810367351016
    };
/// based on https://quantumexperience.ng.bluemix.net/proxy/tutorial/full-user-guide/002-The_Weird_and_Wonderful_World_of_the_Qubit/004-advanced_qubit_gates.html
impl QuantumGate for GateSingleQubit {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary {
        let theta = v[0];
        let phi = v[1];
        let lambda = v[2];
        let i_phi = Complex64::new(0.0, phi);
        let i_lambda = Complex64::new(0.0, lambda);
        let cos = (theta / 2.0).cos();
        let sin = (theta / 2.0).sin();
        arr2(&[[Complex64::new(cos, 0.0), -(i_lambda.exp()) * sin],
               [i_phi.exp() * sin, (i_phi + i_lambda).exp() * cos]])
    }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateCNOT {
    data: QuantumGateData,
    mat: ComplexUnitary,
}
impl pyo3::type_object::PyTypeInfo for GateCNOT {
    type
    Type
    =
    GateCNOT;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateCNOT";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateCNOT>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateCNOT>() - 1) /
             ::std::mem::align_of::<GateCNOT>() *
             ::std::mem::align_of::<GateCNOT>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateCNOT {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateCNOTGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for
 GateCNOTGeneratedPyo3Inventory {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateCNOT {
    type
    InventoryType
    =
    GateCNOTGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateCNOTGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY: ::inventory::Registry<GateCNOTGeneratedPyo3Inventory>
               =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateCNOT { }
impl GateCNOT {
    fn new(obj: &PyRawObject) {
        let one = Complex64::new(1.0, 0.0);
        let nil = Complex64::new(0.0, 0.0);
        obj.init({
                     GateCNOT{data:
                                  QuantumGateData{d: 2,
                                                  dits: 1,
                                                  num_inputs: 2,},
                              mat:
                                  arr2(&[[one, nil, nil, nil],
                                         [nil, one, nil, nil],
                                         [nil, nil, nil, one],
                                         [nil, nil, one, nil]]),}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init6375308589910694352: extern "C" fn() =
    {
        extern "C" fn __init6375308589910694352() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateCNOT as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateCNOT.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateCNOT::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   let _result =
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(GateCNOT::new(&_obj))
                                                                                                                                                       };
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateCNOT.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateCNOT =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateCNOT.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateCNOT =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateCNOT.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateCNOT =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init6375308589910694352
    };
impl QuantumGate for GateCNOT {
    fn make_matrix(&self, _v: &[f64]) -> ComplexUnitary { self.mat.clone() }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateKronecker {
    data: QuantumGateData,
    substeps: Vec<PyObject>,
}
impl pyo3::type_object::PyTypeInfo for GateKronecker {
    type
    Type
    =
    GateKronecker;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateKronecker";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    {
        Self::OFFSET as usize + ::std::mem::size_of::<GateKronecker>() + 0 + 0
    };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateKronecker>() - 1) /
             ::std::mem::align_of::<GateKronecker>() *
             ::std::mem::align_of::<GateKronecker>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateKronecker {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateKroneckerGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for
 GateKroneckerGeneratedPyo3Inventory {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateKronecker {
    type
    InventoryType
    =
    GateKroneckerGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateKroneckerGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY:
               ::inventory::Registry<GateKroneckerGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateKronecker { }
impl GateKronecker {
    fn new(obj: &PyRawObject, substeps: Vec<PyObject>) {
        obj.init({
                     GateKronecker{data:
                                       QuantumGateData{d: 1,
                                                       dits: 1,
                                                       num_inputs:
                                                           substeps.iter().map(|i|
                                                                                   i.input_num()).sum(),},
                                   substeps: substeps,}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init12757267759491806560: extern "C" fn() =
    {
        extern "C" fn __init12757267759491806560() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateKronecker as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateKronecker.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateKronecker::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "substeps",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateKronecker::new(&_obj,
                                                                                                                                                                                                                                    arg0))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateKronecker.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateKronecker =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateKronecker.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateKronecker =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateKronecker.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateKronecker =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init12757267759491806560
    };
impl QuantumGate for GateKronecker {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary {
        let step0 = &self.substeps[0];
        let mut u = step0.make_matrix(&v[..step0.input_num()]);
        let mut index = step0.input_num();
        for i in 1..self.substeps.len() {
            let step = &self.substeps[i];
            u =
                kron(&u,
                     &(step.make_matrix(&v[index..index +
                                                      step.input_num()])));
            index += step.input_num()
        }
        u
    }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
pub struct GateProduct {
    data: QuantumGateData,
    substeps: Vec<PyObject>,
}
impl pyo3::type_object::PyTypeInfo for GateProduct {
    type
    Type
    =
    GateProduct;
    type
    BaseType
    =
    pyo3::types::PyAny;
    const
    NAME:
    &'static str
    =
    "GateProduct";
    const
    DESCRIPTION:
    &'static str
    =
    "\u{0}";
    const
    FLAGS:
    usize
    =
    0;
    const
    SIZE:
    usize
    =
    { Self::OFFSET as usize + ::std::mem::size_of::<GateProduct>() + 0 + 0 };
    const
    OFFSET:
    isize
    =
    {
        ((<pyo3::types::PyAny as pyo3::type_object::PyTypeInfo>::SIZE +
              ::std::mem::align_of::<GateProduct>() - 1) /
             ::std::mem::align_of::<GateProduct>() *
             ::std::mem::align_of::<GateProduct>()) as isize
    };
    #[inline]
    unsafe fn type_object() -> &'static mut pyo3::ffi::PyTypeObject {
        static mut TYPE_OBJECT: pyo3::ffi::PyTypeObject =
            pyo3::ffi::PyTypeObject_INIT;
        &mut TYPE_OBJECT
    }
}
impl pyo3::IntoPyObject for GateProduct {
    fn into_object(self, py: pyo3::Python) -> pyo3::PyObject {
        pyo3::Py::new(py, self).unwrap().into_object(py)
    }
}
#[doc(hidden)]
pub struct GateProductGeneratedPyo3Inventory {
    methods: &'static [pyo3::class::PyMethodDefType],
}
impl pyo3::class::methods::PyMethodsInventory for
 GateProductGeneratedPyo3Inventory {
    fn new(methods: &'static [pyo3::class::PyMethodDefType]) -> Self {
        Self{methods,}
    }
    fn get_methods(&self) -> &'static [pyo3::class::PyMethodDefType] {
        self.methods
    }
}
impl pyo3::class::methods::PyMethodsInventoryDispatch for GateProduct {
    type
    InventoryType
    =
    GateProductGeneratedPyo3Inventory;
}
impl ::inventory::Collect for GateProductGeneratedPyo3Inventory {
    #[inline]
    fn registry() -> &'static ::inventory::Registry<Self> {
        static REGISTRY:
               ::inventory::Registry<GateProductGeneratedPyo3Inventory> =
            ::inventory::Registry::new();
        &REGISTRY
    }
}
impl pyo3::type_object::PyObjectAlloc for GateProduct { }
impl GateProduct {
    fn new(obj: &PyRawObject, py: Python, substeps: Vec<PyObject>) {
        obj.init({
                     GateProduct{data:
                                     QuantumGateData{d: 1,
                                                     dits: 1,
                                                     num_inputs:
                                                         substeps.iter().map(|i|
                                                                                 i.input_num()).sum(),},
                                 substeps: substeps,}
                 });
    }
    fn matrix(&self, py: Python, v: &PyArray1<f64>)
     -> PyResult<Py<PyComplexUnitary>> {
        Ok(PyArray2::from_owned_array(py,
                                      self.make_matrix(v.as_slice())).to_owned())
    }
    fn assemble(&self, v: &PyArray1<f64>) -> PyResult<()> {
        Ok(self.assembly(v.as_slice()))
    }
    fn inputs(&self) -> PyResult<usize> { Ok(self.input_num()) }
}
#[used]
#[allow(non_upper_case_globals)]
#[link_section = ".ctors"]
#[allow(non_upper_case_globals)]
static __init7341291530946649477: extern "C" fn() =
    {
        extern "C" fn __init7341291530946649477() {
            pyo3::inventory::submit({
                                        {
                                            type TyInventory
                                                =
                                                <GateProduct as
                                                pyo3::class::methods::PyMethodsInventoryDispatch>::InventoryType;
                                            <TyInventory as
                                                pyo3::class::methods::PyMethodsInventory>::new(&[pyo3::class::PyMethodDefType::New({
                                                                                                                                       #[allow(unused_mut)]
                                                                                                                                       unsafe extern "C" fn __wrap(_cls:
                                                                                                                                                                       *mut pyo3::ffi::PyTypeObject,
                                                                                                                                                                   _args:
                                                                                                                                                                       *mut pyo3::ffi::PyObject,
                                                                                                                                                                   _kwargs:
                                                                                                                                                                       *mut pyo3::ffi::PyObject)
                                                                                                                                        ->
                                                                                                                                            *mut pyo3::ffi::PyObject {
                                                                                                                                           use pyo3::type_object::PyTypeInfo;
                                                                                                                                           const _LOCATION:
                                                                                                                                                 &'static str
                                                                                                                                                 =
                                                                                                                                               "GateProduct.new()";
                                                                                                                                           let _pool =
                                                                                                                                               pyo3::GILPool::new();
                                                                                                                                           let _py =
                                                                                                                                               pyo3::Python::assume_gil_acquired();
                                                                                                                                           match pyo3::type_object::PyRawObject::new(_py,
                                                                                                                                                                                     GateProduct::type_object(),
                                                                                                                                                                                     _cls)
                                                                                                                                               {
                                                                                                                                               Ok(_obj)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   let _args =
                                                                                                                                                       _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                                   let _kwargs:
                                                                                                                                                           Option<&pyo3::types::PyDict> =
                                                                                                                                                       _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                                   use pyo3::ObjectProtocol;
                                                                                                                                                   const PARAMS:
                                                                                                                                                         &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                         =
                                                                                                                                                       &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                                  "substeps",
                                                                                                                                                                                              is_optional:
                                                                                                                                                                                                  false,
                                                                                                                                                                                              kw_only:
                                                                                                                                                                                                  false,}];
                                                                                                                                                   let mut output =
                                                                                                                                                       [None];
                                                                                                                                                   let _result =
                                                                                                                                                       (||
                                                                                                                                                            {
                                                                                                                                                                pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                                  PARAMS,
                                                                                                                                                                                                  &_args,
                                                                                                                                                                                                  _kwargs,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  false,
                                                                                                                                                                                                  &mut output)?;
                                                                                                                                                                let arg0 =
                                                                                                                                                                    _py;
                                                                                                                                                                let arg1 =
                                                                                                                                                                    output[0usize].unwrap().extract()?;
                                                                                                                                                                pyo3::derive_utils::IntoPyResult::into_py_result(GateProduct::new(&_obj,
                                                                                                                                                                                                                                  arg0,
                                                                                                                                                                                                                                  arg1))
                                                                                                                                                            })();
                                                                                                                                                   match _result
                                                                                                                                                       {
                                                                                                                                                       Ok(_)
                                                                                                                                                       =>
                                                                                                                                                       pyo3::IntoPyPointer::into_ptr(_obj),
                                                                                                                                                       Err(e)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           e.restore(_py);
                                                                                                                                                           ::std::ptr::null_mut()
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               }
                                                                                                                                               Err(e)
                                                                                                                                               =>
                                                                                                                                               {
                                                                                                                                                   e.restore(_py);
                                                                                                                                                   ::std::ptr::null_mut()
                                                                                                                                               }
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                       pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                    "new",
                                                                                                                                                                ml_meth:
                                                                                                                                                                    pyo3::class::PyMethodType::PyNewFunc(__wrap),
                                                                                                                                                                ml_flags:
                                                                                                                                                                    pyo3::ffi::METH_VARARGS
                                                                                                                                                                        |
                                                                                                                                                                        pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                ml_doc:
                                                                                                                                                                    "\u{0}",}
                                                                                                                                   }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateProduct.matrix()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateProduct =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               _py;
                                                                                                                                                           let arg1 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.matrix(arg0,
                                                                                                                                                                                                                        arg1))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "matrix",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _args:
                                                                                                                                                                          *mut pyo3::ffi::PyObject,
                                                                                                                                                                      _kwargs:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateProduct.assemble()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateProduct =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _args =
                                                                                                                                                  _py.from_borrowed_ptr::<pyo3::types::PyTuple>(_args);
                                                                                                                                              let _kwargs:
                                                                                                                                                      Option<&pyo3::types::PyDict> =
                                                                                                                                                  _py.from_borrowed_ptr_or_opt(_kwargs);
                                                                                                                                              use pyo3::ObjectProtocol;
                                                                                                                                              const PARAMS:
                                                                                                                                                    &'static [pyo3::derive_utils::ParamDescription]
                                                                                                                                                    =
                                                                                                                                                  &[pyo3::derive_utils::ParamDescription{name:
                                                                                                                                                                                             "v",
                                                                                                                                                                                         is_optional:
                                                                                                                                                                                             false,
                                                                                                                                                                                         kw_only:
                                                                                                                                                                                             false,}];
                                                                                                                                              let mut output =
                                                                                                                                                  [None];
                                                                                                                                              let _result =
                                                                                                                                                  (||
                                                                                                                                                       {
                                                                                                                                                           pyo3::derive_utils::parse_fn_args(Some(_LOCATION),
                                                                                                                                                                                             PARAMS,
                                                                                                                                                                                             &_args,
                                                                                                                                                                                             _kwargs,
                                                                                                                                                                                             false,
                                                                                                                                                                                             false,
                                                                                                                                                                                             &mut output)?;
                                                                                                                                                           let arg0 =
                                                                                                                                                               output[0usize].unwrap().extract()?;
                                                                                                                                                           pyo3::derive_utils::IntoPyResult::into_py_result(_slf.assemble(arg0))
                                                                                                                                                       })();
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "assemble",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_VARARGS
                                                                                                                                                                           |
                                                                                                                                                                           pyo3::ffi::METH_KEYWORDS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      }),
                                                                                                 pyo3::class::PyMethodDefType::Method({
                                                                                                                                          unsafe extern "C" fn __wrap(_slf:
                                                                                                                                                                          *mut pyo3::ffi::PyObject)
                                                                                                                                           ->
                                                                                                                                               *mut pyo3::ffi::PyObject {
                                                                                                                                              const _LOCATION:
                                                                                                                                                    &'static str
                                                                                                                                                    =
                                                                                                                                                  "GateProduct.inputs()";
                                                                                                                                              let _pool =
                                                                                                                                                  pyo3::GILPool::new();
                                                                                                                                              let _py =
                                                                                                                                                  pyo3::Python::assume_gil_acquired();
                                                                                                                                              let _slf:
                                                                                                                                                      &mut GateProduct =
                                                                                                                                                  pyo3::FromPyPointer::from_borrowed_ptr(_py,
                                                                                                                                                                                         _slf);
                                                                                                                                              let _result =
                                                                                                                                                  {
                                                                                                                                                      pyo3::derive_utils::IntoPyResult::into_py_result(_slf.inputs())
                                                                                                                                                  };
                                                                                                                                              pyo3::callback::cb_convert(pyo3::callback::PyObjectCallbackConverter,
                                                                                                                                                                         _py,
                                                                                                                                                                         _result)
                                                                                                                                          }
                                                                                                                                          pyo3::class::PyMethodDef{ml_name:
                                                                                                                                                                       "inputs",
                                                                                                                                                                   ml_meth:
                                                                                                                                                                       pyo3::class::PyMethodType::PyNoArgsFunction(__wrap),
                                                                                                                                                                   ml_flags:
                                                                                                                                                                       pyo3::ffi::METH_NOARGS,
                                                                                                                                                                   ml_doc:
                                                                                                                                                                       "\u{0}",}
                                                                                                                                      })])
                                        }
                                    });
        }
        __init7341291530946649477
    };
impl <'a> QuantumGate for GateProduct {
    fn make_matrix(&self, v: &[f64]) -> ComplexUnitary {
        let step0 = &self.substeps[0];
        let mut u = step0.make_matrix(&v[..step0.input_num()]);
        let mut index = step0.input_num();
        for i in 1..self.substeps.len() {
            let step = &self.substeps[i];
            u =
                u.dot(&(step.make_matrix(&v[index..index +
                                                       step.input_num()])));
            index += step.input_num()
        }
        u
    }
    fn assembly(&self, _v: &[f64]) { }
    fn input_num(&self) -> usize { self.data.num_inputs as usize }
}
fn search_compiler_native(py: Python, m: &PyModule) -> PyResult<()> {
    m.add_class::<GateIdentity>()?;
    m.add_class::<GateCNOT>()?;
    m.add_class::<GateKronecker>()?;
    m.add_class::<GateProduct>()?;
    m.add_class::<GateSingleQubit>()?;
    m.add_class::<GateRX>()?;
    m.add_class::<GateRY>()?;
    m.add_class::<GateRZ>()?;
    Ok(())
}
#[no_mangle]
#[allow(non_snake_case)]
#[doc =
      r" This autogenerated function is called by the python interpreter when importing"]
#[doc = r" the module."]
pub unsafe extern "C" fn PyInit_search_compiler_native()
 -> *mut pyo3::ffi::PyObject {
    pyo3::derive_utils::make_module("search_compiler_native\u{0}", "",
                                    search_compiler_native)
}
