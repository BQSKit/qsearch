name: run tests

on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8]
        os: [macOS-latest, ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
        - name: checkout
          uses: actions/checkout@v2
          with:
            submodules: true
        - name: setup python
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        - uses: actions/cache@v2
          if: startsWith(runner.os, 'Linux')
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
        - uses: actions/cache@v2
          if: startsWith(runner.os, 'macOS')
          with:
            path: ~/Library/Caches/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
        - uses: actions/cache@v2
          if: startsWith(runner.os, 'Windows')
          with:
            path: ~\AppData\Local\pip\Cache
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
        - uses: actions/cache@v2
          with:
            path: |
              ~/.cargo/registry
              ~/.cargo/git
              target
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        - uses: actions/cache@v2
          if: startsWith(matrix.os, 'Windows')
          with:
            path: |
              target/vcpkg
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
        - name: Install nightly-2020-04-06
          uses: actions-rs/toolchain@v1
          with:
              toolchain: nightly-2020-04-06
              default: true
        - if: startsWith(matrix.os, 'ubuntu')
          run: sudo apt install libopenblas-dev libgfortran-7-dev libceres-dev
        - if: startsWith(matrix.os, 'macOS')
          run: brew install ceres-solver eigen
        - if: startsWith(matrix.os, 'Windows')
          run: cargo install cargo-vcpkg && cargo vcpkg -v build
        - name: Test building & installing Rust extension
          run: pip install .
          env:
            RUST_BACKTRACE: 1
          if: startsWith(matrix.os, 'ubuntu')
        - name: Build macOS wheels
          run: pip install maturin && maturin build --cargo-extra-args="--no-default-features --features python,accelerate,rustopt" --release --no-sdist && pip install --no-index --find-links=target/wheels scrs
          env:
            RUST_BACKTRACE: 1
          if: startsWith(matrix.os, 'macOS')
        - name: Build Windows wheels
          run: pip install maturin && maturin build --cargo-extra-args="--no-default-features --features python,rustopt,static" --release --no-sdist && pip install --no-index --find-links=target/wheels scrs
          env:
            RUST_BACKTRACE: 1
          if: startsWith(matrix.os, 'Windows')
        - name: Install test requirements
          run: pip install -r test-requirements.txt
        - name: Run tests
          run: pytest
        - name: Remove target/ to prepare for building manylinux wheels
          run: rm -rf target
          env:
            RUST_BACKTRACE: 1
          if: startsWith(matrix.os, 'ubuntu')
        - name: Build manylinux wheels
          run: docker run -e OPENBLAS_ARGS="DYNAMIC_ARCH=1" --rm -v $(pwd):/io ethanhs/maturin-manylinux-2010:0.5 build --cargo-extra-args="--no-default-features --features python,static,rustopt" --release --manylinux 2010 --no-sdist
          env:
            RUST_BACKTRACE: 1
          if: startsWith(matrix.os, 'ubuntu') && matrix.python-version == 3.8
        - name: upload wheel artifacts
          uses: actions/upload-artifact@v1
          with:
            name: scrs-wheels-${{matrix.os}}-${{matrix.python-version}}
            path: target/wheels
          if: startsWith(matrix.os, 'macOS') || matrix.python-version == 3.8
