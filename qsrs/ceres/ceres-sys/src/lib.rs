/* automatically generated by rust-bindgen 0.54.1 */
pub mod solve_silent;
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod ceres {
    #[allow(unused_imports)]
    use self::super::ceres;
    extern "C" {
        pub fn ceres_init();
    }
    pub type ceres_cost_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            parameters: *mut *mut f64,
            residuals: *mut f64,
            jacobians: *mut *mut f64,
        ) -> ::std::os::raw::c_int,
    >;
    pub type ceres_loss_function_t = ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            squared_norm: f64,
            out: *mut f64,
        ),
    >;
    extern "C" {
        pub fn ceres_create_huber_loss_function_data(a: f64) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn ceres_create_softl1_loss_function_data(a: f64) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn ceres_create_cauchy_loss_function_data(a: f64) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn ceres_create_arctan_loss_function_data(a: f64) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn ceres_create_tolerant_loss_function_data(
            a: f64,
            b: f64,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn ceres_free_stock_loss_function_data(loss_function_data: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn ceres_stock_loss_function(
            user_data: *mut ::std::os::raw::c_void,
            squared_norm: f64,
            out: *mut f64,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ceres_problem_s {
        _unused: [u8; 0],
    }
    pub type ceres_problem_t = ceres::ceres_problem_s;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ceres_residual_block_id_s {
        _unused: [u8; 0],
    }
    pub type ceres_residual_block_id_t = ceres::ceres_residual_block_id_s;
    extern "C" {
        pub fn ceres_create_problem() -> *mut ceres::ceres_problem_t;
    }
    extern "C" {
        pub fn ceres_free_problem(problem: *mut ceres::ceres_problem_t);
    }
    extern "C" {
        pub fn ceres_problem_add_residual_block(
            problem: *mut ceres::ceres_problem_t,
            cost_function: ceres::ceres_cost_function_t,
            cost_function_data: *mut ::std::os::raw::c_void,
            loss_function: ceres::ceres_loss_function_t,
            loss_function_data: *mut ::std::os::raw::c_void,
            num_residuals: ::std::os::raw::c_int,
            num_parameter_blocks: ::std::os::raw::c_int,
            parameter_block_sizes: *mut ::std::os::raw::c_int,
            parameters: *mut *mut f64,
        ) -> *mut ceres::ceres_residual_block_id_t;
    }
    extern "C" {
        pub fn ceres_solve(problem: *mut ceres::ceres_problem_t);
    }
}
